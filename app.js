//трепачев решение задач

/*let num1 = prompt('Введите первое число');
let num2 = prompt('Введите второе число');

alert(num1 + num2)

//Переделайте приведенный выше код так, чтобы суммировались числа, а не строки

let num11 = prompt('Введите первое число');
let num22 = prompt('Введите второе число');

alert(Number(num11) + Number(num22))

//С помощью функции prompt спросите у пользователя сторону квадрата. Выведите на экран площадь введенного квадрата.

let num111 = prompt('Введите сторону квадрата')

alert(Number(num111) * Number(num111))

//С помощью двух функций prompt спросите у пользователя стороны прямоугольника. Выведите на экран периметр введенного прямоугольника.

let num110 = prompt('Введите сторону прямоугольника')
let num210 = prompt('Введите сторону прямоугольника')

alert((Number(num110) + Number(num210)) * 2)*/

//Выведите текст из переменной в окно браузера так, чтобы он был курсивным.

let str = 'text';
document.write('<i>' + str + '</i>');

//Выведите в окно браузера столбец чисел от 1 до 5.

document.write('<br>');
document.write('1<br>');
document.write('2<br>');
document.write('3<br>');
document.write('4<br>');
document.write('5<br>');

/* Код должен находить сумму чисел:

let num1 = 1;
let num2 = 2;
console.log('сумма: ' + num1 + num2);*/

let num1 = 1;
let num2 = 2;
console.log('сумма: ' + (num1 + num2));

/*Код должен находить сумму цифр числа:

let num = '123';
let sum = num[0] + num[1] + num[2];
console.log(sum);*/

let num = '123';
let sum = Number(num[0]) + Number(num[1]) + Number(num[2]);
console.log(sum);

/*Код должен вывести первую цифру числа:

let num = 123;
console.log(num[0]);*/

let nu = String(123);
console.log(nu[0]);

/*Код должен вывести количество цифр в числе:

let num = 123;
console.log(num.length);*/

let nume = '123';
console.log(nume.length);

/*Код должен вывести количество цифр в числе:

let num = 123;
let str = String(num);
console.log(num.length);*/

let numa = '123';
let stra = String(numa);
console.log(numa.length);

/*Код должен вывести последнюю цифру числа:

let num = 123;
let str = String(num);
console.log(num[num.length]);*/

let numu = '123';
let stru = String(numu);
console.log(numu[numu.length - 1]);

/*Дан следующий массив:

let arr = ['a', 'b', 'c', 'd'];
Выведите с помощью этого массива следующую строку:

'a+b+c+d'*/

let arr = ['a', 'b', 'c', 'd'];
let suma = arr.join('+')
console.log(suma)

let arre = [1, 2, 3, 4, 5];
let key1 = 1;
let key2 = 2;
//Найдите сумму элементов, ключи которых хранятся в наших переменных.
let sume = arre[key1] + arre[key2]
console.log(sume)

//Создайте объект date с ключами 'year', 'month' и 'day' и значениями, соответствующими текущему дню. 
//Выведите созданную дату на экран в формате год-месяц-день.

let data = {day: 21, month: 'may', year: 2023}
let {day, month, year} = data
console.log(year, month, day)

/*Мы можем писать без кавычек не все ключи объектов, а только те, которые удовлетворяют следующим ограничениям: 
они не могут начинаться с цифры и не могут содержать внутри себя дефис, пробел и тому подобные вещи. 
Если строка нарушает ограничение, то ее нужно брать в кавычки. В следующем примере в часть ключей не удовлетворяет 
условиям и поэтому стоят в кавычках:

let obj = {'1key': 'a', 'key-2': 'b', key3: 'c'};
К таким ключам можно обращаться только через квадратные скобки:

console.log(obj['1key']);
console.log(obj['key-2']);*/

/*Дан объект:

let obj = {x: 1, y: 2, z: 3};
Возведите в квадрат каждый элемент этого объекта.*/

let obj = {x: 1, y: 2, z: 3};
obj.x *= 2
obj.y *= 2
obj.z *= 2
console.log(obj)

//Массив ключей объекта в JavaScript
let objk = {a: 1, b: 2, c: 3};

//Получим массив его ключей:
let keys = Object.keys(objk);

console.log(keys);


//У объектов нет свойства length, позволяющего найти их длину. Давайте убедимся в этом. Пусть у нас есть следующий объект:

let objkt = {a: 1, b: 2, c: 3};

//Попробуем узнать количество его элементов:
//Решим задачу обходным путем - получим массив ключей объекта и найдем его длину:

console.log(Object.keys(objkt).length);

//В следующем коде мы из объекта получаем элемент с ключом 'key':
//console.log(obj['key']);

let obj1 = {x: 1, y: 2, z: 3};
console.log(obj1['x']);

//А в следующем коде мы из объекта получаем элемент с ключом, имя которого хранится в переменной key:
//console.log(obj[key]);

let obj2 = {x: 1, y: 2, z: 3};
let key = 'x';
console.log(obj2[key]);



let obj3 = {a: 1, b: 2, c: 3};
let key3 = 'a';
//Единственным способом обратиться к элементу по ключу из переменной является запись этой переменной в квадратных скобках:
console.log(obj3[key3]);


//С помощью оператора in можно проверять наличие свойства в объекте.

let obj4 = {a: 1, b: 2, c: 3};
console.log('b' in obj4); // выведет true
console.log('x' in obj4); // выведет false
delete obj4.b; //Оператор delete
console.log(obj4); // выведет {a: 1, c: 3}

//Объекты имеют свой тип данных, который называется 'object'. Проверим с помощью оператора typeof

console.log(typeof {}); // выведет 'object'
console.log(typeof []); // выведет 'object'

//Для различия объекта и массива функция Array.isArray()

console.log( Array.isArray([]) ); // выведет true
console.log( Array.isArray({}) ); // выведет false

//В JavaScript семь примитивных типов данных: string, number, boolean, null, undefined, symbol, bigint.
// Запомните их количество и названия - это часто спрашивают на собеседованиях.

//Массивы и объекты несколько отличаются от остальных примитивных типов данных.
//Отличие в том, что переменная, хранящая массив, на самом деле не содержит его, а просто ссылается на него.
//На практике это означает, что при записи объекта в другую переменную, обе переменных будут ссылаться на один и тот же объект. 
//Давайте попробуем на практике. Пусть у нас есть следующий объект:
//let obj1 = {a: 1, b: 2, c: 3};
//Присвоим его из одной переменной в другую:
//let obj2 = obj1;
//Изменим одну из переменных:
//obj2.a = '!';
//В результате изменения будут видны и в другой переменной:
//console.log(obj1); // {a: '!', b: 2, c: 3}


//Константы, содержащие массивы и объекты, работают интересным образом. 
//JavaScript не разрешает изменять значения этих констант, но изменять свойства объектов и значения элементов массивов - можно.
//Давайте посмотрим на примерах. Пусть у нас дан вот такой объект:
//const obj = {a: 1, b: 2, c: 3};
//Давайте попробуем записать в него что-то другое:
//obj = 123; // ошибка
//Давайте попробуем записать в константу другой объект:
//obj = {x: 1, y: 2, z: 3}; // ошибка
//Однако, если мы попробуем изменить свойство объекта, то это сработает:
//obj.a = '+'; // работает!



//Конструкция if-else в JavaScript

if (/*операция сравнения*/1>=0) {
	/*
		расположенный здесь код выполниться,
		если результат операция сравнения верный
	*/
} else {
	/*
		расположенный здесь код выполниться,
		если результат операция сравнения неверный
	*/
}


//Операторы больше и меньше в JavaScript

//используются операторы больше >, больше или равно >=, меньше <, меньше или равно <=
//Для проверки двух значений на равенство используется оператор ==
//Оператор != проверяет на неравенство.


